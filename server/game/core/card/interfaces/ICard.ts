// import type { ISetId, Zone } from '../../../Interfaces';
// import type { AbilityContext } from '../../ability/AbilityContext';
// import type { ActionAbility } from '../../ability/ActionAbility';
// import type { CardAbility } from '../../ability/CardAbility';
// import type { KeywordInstance, KeywordWithCostValues } from '../../ability/KeywordInstance';
// import type PlayerOrCardAbility from '../../ability/PlayerOrCardAbility';
// import type { Aspect, CardType, KeywordName, MoveZoneDestination, Trait, ZoneName } from '../../Constants';
// import type { IConstantAbility } from '../../ongoingEffect/IConstantAbility';
// import type Player from '../../Player';
// import type { IInPlayCard } from './IInPlayCard';
// import type { IPlayableOrDeployableCard } from './IPlayableOrDeployableCard';

// export interface ICard {
//     readonly aspects: Aspect[];
//     readonly backSideAspects: Aspect[];
//     readonly backSideTitle: string;
//     readonly controller: Player;
//     readonly facedown: boolean;
//     readonly internalName: string;
//     readonly keywords: KeywordInstance[];
//     readonly subtitle: string;
//     readonly title: string;
//     readonly unique: boolean;
//     readonly name;
//     readonly setId: ISetId;
//     readonly traits: Set<Trait>;
//     readonly type: CardType;
//     readonly zone: Zone;
//     readonly zoneName: ZoneName;
//     readonly owner: Player;
//     getActionAbilities(): ActionAbility[];
//     getConstantAbilities(): IConstantAbility[];
//     getActions(): PlayerOrCardAbility[];
//     // createActionAbility<TSource extends ICard>(properties: IActionAbilityProps<TSource>): ActionAbility;
//     // createConstantAbility<TSource extends ICard>(properties: IConstantAbilityProps<TSource>): IConstantAbility;
//     // isEvent(): this is EventCard;
//     // isUnit(): this is UnitCard;
//     // isUpgrade(): this is UpgradeCard;
//     // isBase(): this is BaseCard;
//     // isDeployableLeader(): this is LeaderUnitCard;
//     // isDoubleSidedLeader(): this is DoubleSidedLeaderCard;
//     // isLeader(): this is LeaderCard;
//     // isLeaderUnit(): this is LeaderUnitCard;
//     // isNonLeaderUnit(): this is NonLeaderUnitCard;
//     // isToken(): this is TokenCard;
//     // isTokenUnit(): this is TokenUnitCard;
//     // isTokenUpgrade(): this is TokenUpgradeCard;
//     // isShield(): this is Shield;
//     // canBeDamaged(): this is CardWithDamageProperty;
//     // canBeInvolvedInAttack(): this is CardWithDamageProperty;
//     canBeExhausted(): this is IPlayableOrDeployableCard;
//     // hasCost(): this is ICardWithCostProperty;
//     // isTokenOrPlayable(): this is TokenOrPlayableCard;
//     // canRegisterTriggeredAbilities(): this is InPlayCard | BaseCard;
//     canBeInPlay(): this is IInPlayCard;
//     getKeywordsWithCostValues(keywordName: KeywordName): KeywordWithCostValues[];
//     hasSomeKeyword(keywords: Set<KeywordName> | KeywordName | KeywordName[]): boolean;
//     hasEveryKeyword(keywords: Set<KeywordName> | KeywordName[]): boolean;
//     hasSomeTrait(traits: Set<Trait> | Trait | Trait[]): boolean;
//     hasEveryTrait(traits: Set<Trait> | Trait[]): boolean;
//     hasSomeAspect(aspects: Set<Aspect> | Aspect | Aspect[]): boolean;
//     hasEveryAspect(aspects: Set<Aspect> | Aspect[]): boolean;
//     isBlank(): boolean;
//     canTriggerAbilities(context: AbilityContext, ignoredRequirements?: string[]): boolean;
//     canInitiateKeywords(context: AbilityContext): boolean;
//     moveTo(targetZoneName: MoveZoneDestination);
//     initializeZone(zone: Zone);
//     resolveAbilitiesForNewZone();
//     isCard(): this is ICard;
//     isResource();
//     canPlay(context, type);
//     anotherUniqueInPlay(player);
//     anotherUniqueInPlayControlledBy(player);
//     getModifiedAbilityLimitMax(player: Player, ability: CardAbility, max: number): number;
//     getSummary(activePlayer: Player): any;
//     getShortSummaryForControls(activePlayer: Player): any;
// }