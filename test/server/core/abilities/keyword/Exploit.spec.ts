describe('Exploit keyword', function() {
    integration(function(contextRef) {
        describe('When a unit with the Exploit keyword', function() {
            beforeEach(function () {
                contextRef.setupTest({
                    phase: 'action',
                    player1: {
                        hand: ['separatist-super-tank'],
                        groundArena: ['wampa', 'atst', 'battle-droid', 'snowspeeder'],
                        leader: 'moff-gideon#formidable-commander',
                        resources: 9
                    },
                    player2: {
                        groundArena: ['battlefield-marine']
                    }
                });
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the exact number of targets to be able to pay', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(5);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.battleDroid);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCardNonChecking(context.snowspeeder); // confirm that Snowspeeder can't be selected since it's exploit 3
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(8); // 5 + 3 after exploit
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the minimum number of targets to be able to pay (which we choose)', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(4);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('groundArena');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(9); // 4 + 5 after exploit
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the minimum number of targets to be able to pay (but we choose the max)', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(4);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                expect(context.player1).toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.battleDroid);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCardNonChecking(context.snowspeeder); // confirm that Snowspeeder can't be selected since it's exploit 3
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(7); // 4 + 3 after exploit
            });

            it('is played and there are enough resources for standard play, should present both options and allow us to do max exploit', function () {
                const { context } = contextRef;

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toHaveExactPromptButtons(['Play Separatist Super Tank', 'Play Separatist Super Tank using Exploit', 'Cancel']);
                context.player1.clickPrompt('Play Separatist Super Tank using Exploit');

                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.wampa);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.battleDroid);
                expect(context.player1).toHaveEnabledPromptButton('Done');

                context.player1.clickCardNonChecking(context.snowspeeder); // confirm that Snowspeeder can't be selected since it's exploit 3
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(3);
            });
        });

        it('When a unit with the Exploit keyword is played and there aren\'t enough units for the full amount, it will consider only as many as possible for the discount math', function() {
            contextRef.setupTest({
                phase: 'action',
                player1: {
                    hand: ['droideka-security'],
                    groundArena: ['wampa'],
                    leader: 'director-krennic#aspiring-to-authority',
                    resources: 3
                },
                player2: {
                    groundArena: ['battlefield-marine']
                }
            });

            const { context } = contextRef;

            // if there were enough units for the full exploit 2 then it would be playable, but there's only one unit
            expect(context.droidekaSecurity).not.toHaveAvailableActionWhenClickedBy(context.player1);
        });

        it('When a unit with the Exploit keyword is played and there are no exploitable units, it will default to standard play', function() {
            contextRef.setupTest({
                phase: 'action',
                player1: {
                    hand: ['droideka-security'],
                },
                player2: {
                    groundArena: ['battlefield-marine']
                }
            });

            const { context } = contextRef;

            context.player1.clickCard(context.droidekaSecurity);

            expect(context.droidekaSecurity).toBeInZone('groundArena');
            expect(context.player2).toBeActivePlayer();
        });

        it('When a unit with the Exploit keyword is played and there are other discounts being applied, they will stack', function() {
            contextRef.setupTest({
                phase: 'action',
                player1: {
                    hand: ['multitroop-transport'],
                    groundArena: ['bendu#the-one-in-the-middle'],
                    leader: 'director-krennic#aspiring-to-authority',
                    resources: 3
                }
            });

            const { context } = contextRef;

            // attack with Bendu to activate discount
            context.player1.clickCard(context.bendu);
            context.player1.clickCard(context.p2Base);
            context.player2.passAction();

            // play Multitroop Transport, it will only be playable if the discount + exploit opportunity is computed right
            context.player1.clickCard(context.multitroopTransport);
            expect(context.player1).toBeAbleToSelectExactly([context.bendu]);
            context.player1.clickCard(context.bendu);
            context.player1.clickPrompt('Done');

            expect(context.multitroopTransport).toBeInZone('groundArena');
            expect(context.bendu).toBeInZone('discard');
            expect(context.player1.exhaustedResourceCount).toBe(3);
        });

        describe('When a unit with a "when defeated" ability is exploited', function() {
            beforeEach(function () {
                contextRef.setupTest({
                    phase: 'action',
                    player1: {
                        hand: ['tridroid-suppressor', 'planetary-invasion', 'timely-intervention'],
                        groundArena: [
                            'vanguard-infantry',
                            'bib-fortuna#jabbas-majordomo',
                            { card: 'bossk#deadly-stalker', exhausted: true }
                        ]
                    },
                    player2: {
                        groundArena: ['wampa']
                    }
                });
            });

            it('to play a unit card with a standard play action, the trigger happens in the same window as the played card\'s "on played" trigger', function() {
                const { context } = contextRef;

                context.player1.clickCard(context.tridroidSuppressor);
                context.player1.clickPrompt('Play Tri-Droid Suppressor using Exploit');
                context.player1.clickCard(context.vanguardInfantry);
                context.player1.clickPrompt('Done');

                expect(context.vanguardInfantry).toBeInZone('discard');
                expect(context.tridroidSuppressor).toBeInZone('groundArena');
                expect(context.player1).toHaveExactPromptButtons([
                    'Give an Experience token to a unit',
                    'Exhaust an enemy ground unit.'
                ]);

                // resolve Vanguard Infantry ability and confirm it sees the right targets
                context.player1.clickPrompt('Give an Experience token to a unit');
                expect(context.player1).toBeAbleToSelectExactly([context.tridroidSuppressor, context.bossk, context.wampa, context.bibFortuna]);
                context.player1.clickCard(context.tridroidSuppressor);
                expect(context.tridroidSuppressor).toHaveExactUpgradeNames(['experience']);

                // resolve Tri-Droid Suppressor ability
                expect(context.player1).toBeAbleToSelectExactly([context.wampa]);
                context.player1.clickCard(context.wampa);
                expect(context.wampa.exhausted).toBeTrue();
            });

            it('to play an event card, the trigger happens in the same window as any "when event is played" triggers', function() {
                const { context } = contextRef;

                context.player1.clickCard(context.planetaryInvasion);
                context.player1.clickPrompt('Play Planetary Invasion using Exploit');
                context.player1.clickCard(context.vanguardInfantry);
                context.player1.clickPrompt('Done');

                // when event ability resolves, the unit is defeated but the cost triggers have not happened yet
                expect(context.vanguardInfantry).toBeInZone('discard');
                expect(context.planetaryInvasion).toBeInZone('discard');
                expect(context.player1).toBeAbleToSelectExactly([context.bossk, context.wampa, context.bibFortuna]);
                context.player1.clickCard(context.bossk);
                context.player1.clickPrompt('Done');
                expect(context.bossk.exhausted).toBeFalse();

                expect(context.player1).toHaveExactPromptButtons([
                    'Give an Experience token to a unit',
                    'Deal 2 damage to a unit'
                ]);

                // resolve Vanguard Infantry ability and confirm it sees the right targets
                context.player1.clickPrompt('Give an Experience token to a unit');
                expect(context.player1).toBeAbleToSelectExactly([context.bossk, context.wampa, context.bibFortuna]);
                context.player1.clickCard(context.bossk);
                expect(context.bossk).toHaveExactUpgradeNames(['experience']);

                // resolve Bossk ability
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.bossk, context.bibFortuna]);
                context.player1.clickCard(context.wampa);
                expect(context.wampa.damage).toBe(2);
            });

            it('to play a unit card via an event card ability, the trigger happens in the same window as the unit card\'s "on played" trigger and any "when event is played" triggers', function() {
                const { context } = contextRef;

                context.player1.clickCard(context.timelyIntervention);
                context.player1.clickCard(context.tridroidSuppressor);
                context.player1.clickPrompt('Play Tri-Droid Suppressor using Exploit');
                context.player1.clickCard(context.vanguardInfantry);
                context.player1.clickPrompt('Done');

                expect(context.vanguardInfantry).toBeInZone('discard');
                expect(context.tridroidSuppressor).toBeInZone('groundArena');
                expect(context.player1).toHaveExactPromptButtons([
                    'Ambush',
                    'Give an Experience token to a unit',
                    'Exhaust an enemy ground unit.',
                    'Deal 2 damage to a unit'
                ]);

                // resolve Vanguard Infantry ability and confirm it sees the right targets
                context.player1.clickPrompt('Give an Experience token to a unit');
                expect(context.player1).toBeAbleToSelectExactly([context.tridroidSuppressor, context.bossk, context.wampa, context.bibFortuna]);
                context.player1.clickCard(context.tridroidSuppressor);
                expect(context.tridroidSuppressor).toHaveExactUpgradeNames(['experience']);

                // resolve Tri-Droid Suppressor ability
                context.player1.clickPrompt('Exhaust an enemy ground unit.');
                expect(context.player1).toBeAbleToSelectExactly([context.wampa]);
                context.player1.clickCard(context.wampa);
                expect(context.wampa.exhausted).toBeTrue();

                // resolve Bossk ability
                context.player1.clickPrompt('Deal 2 damage to a unit');
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.bossk, context.tridroidSuppressor, context.bibFortuna]);
                context.player1.clickCard(context.wampa);
                expect(context.wampa.damage).toBe(2);

                // pass Ambush
                context.player1.clickPrompt('Pass');
            });

            it('to play an event card using a unit card\'s ability, the trigger happens in the same window as any "when event is played" triggers', function() {
                const { context } = contextRef;

                context.player1.clickCard(context.bibFortuna);
                context.player1.clickPrompt('Play an event from your hand. It costs 1 less.');
                context.player1.clickCard(context.planetaryInvasion);
                context.player1.clickPrompt('Play Planetary Invasion using Exploit');
                context.player1.clickCard(context.vanguardInfantry);
                context.player1.clickPrompt('Done');

                // when event ability resolves, the unit is defeated but the cost triggers have not happened yet
                expect(context.vanguardInfantry).toBeInZone('discard');
                expect(context.planetaryInvasion).toBeInZone('discard');
                expect(context.player1).toBeAbleToSelectExactly([context.bossk, context.wampa, context.bibFortuna]);
                context.player1.clickCard(context.bossk);
                context.player1.clickPrompt('Done');
                expect(context.bossk.exhausted).toBeFalse();

                expect(context.player1).toHaveExactPromptButtons([
                    'Give an Experience token to a unit',
                    'Deal 2 damage to a unit'
                ]);

                // resolve Vanguard Infantry ability and confirm it sees the right targets
                context.player1.clickPrompt('Give an Experience token to a unit');
                expect(context.player1).toBeAbleToSelectExactly([context.bossk, context.wampa, context.bibFortuna]);
                context.player1.clickCard(context.bossk);
                expect(context.bossk).toHaveExactUpgradeNames(['experience']);

                // resolve Bossk ability
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.bossk, context.bibFortuna]);
                context.player1.clickCard(context.wampa);
                expect(context.wampa.damage).toBe(2);
            });
        });

        it('When a unit with a +hp effect is exploited, any defeat triggers caused by its effect going away resolve in the same window as on-play triggers for the played card', function() {
            contextRef.setupTest({
                phase: 'action',
                player1: {
                    hand: ['tridroid-suppressor'],
                    groundArena: [
                        'general-veers#blizzard-force-commander',
                        { card: 'death-star-stormtrooper', damage: 1 },
                        'general-krell#heartless-tactician'
                    ]
                },
                player2: {
                    groundArena: ['wampa']
                }
            });

            const { context } = contextRef;

            context.player1.clickCard(context.tridroidSuppressor);
            context.player1.clickPrompt('Play Tri-Droid Suppressor using Exploit');
            context.player1.clickCard(context.generalVeers);
            context.player1.clickPrompt('Done');

            expect(context.generalVeers).toBeInZone('discard');
            expect(context.deathStarStormtrooper).toBeInZone('discard');
            expect(context.tridroidSuppressor).toBeInZone('groundArena');

            // there should be two activations of the Krell ability, one for Veers and one for Stormtrooper
            expect(context.player1).toHaveExactPromptButtons([
                'Draw a card',
                'Draw a card',
                'Exhaust an enemy ground unit.'
            ]);

            // resolve Tri-Droid Suppressor ability
            context.player1.clickPrompt('Exhaust an enemy ground unit.');
            expect(context.player1).toBeAbleToSelectExactly([context.wampa]);
            context.player1.clickCard(context.wampa);
            expect(context.wampa.exhausted).toBeTrue();

            // resolve first Krell ability, second resolves automatically
            context.player1.clickPrompt('Draw a card');
            context.player1.clickPrompt('Draw a card');
            expect(context.player1.handSize).toBe(1);
            context.player1.clickPrompt('Draw a card');
            expect(context.player1.handSize).toBe(2);
        });

        it('When a card with exploit is being played for free from discard, it should still trigger the exploit ability', function() {
            contextRef.setupTest({
                phase: 'action',
                player1: {
                    hand: ['palpatines-return'],
                    groundArena: ['wampa', 'battle-droid'],
                    discard: ['droideka-security'],
                    resources: 6,
                    leader: 'director-krennic#aspiring-to-authority',
                    base: 'echo-base'
                }
            });

            const { context } = contextRef;

            context.player1.clickCard(context.palpatinesReturn);
            context.player1.clickCard(context.droidekaSecurity);
            expect(context.player1).toHaveExactPromptButtons(['Play Droideka Security', 'Play Droideka Security using Exploit']);
            context.player1.clickPrompt('Play Droideka Security using Exploit');

            expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.battleDroid]);
            context.player1.clickCard(context.wampa);
            expect(context.player1).toHaveEnabledPromptButton('Done');
            context.player1.clickCard(context.battleDroid);
            context.player1.clickPrompt('Done');

            expect(context.droidekaSecurity).toBeInZone('groundArena');
            expect(context.wampa).toBeInZone('discard');
            expect(context.battleDroid).toBeInZone('outsideTheGame');
        });

        // TODO TECH: test smuggle + exploit
    });
});
