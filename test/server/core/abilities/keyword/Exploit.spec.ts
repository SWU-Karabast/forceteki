describe('Exploit keyword', function() {
    integration(function(contextRef) {
        describe('When a unit with the Exploit keyword', function() {
            beforeEach(function () {
                contextRef.setupTest({
                    phase: 'action',
                    player1: {
                        hand: ['droideka-security'],
                        groundArena: ['wampa', 'atst', 'battle-droid'],
                        leader: 'director-krennic#aspiring-to-authority',
                        resources: 6
                    }
                });
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the minimum number of targets to be able to pay', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(3);

                context.player1.clickCard(context.droidekaSecurity);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.battleDroid);
                context.player1.clickCardNonChecking(context.atst); // confirm that AT-ST can't be selected since it's exploit 2
                context.player1.clickPrompt('Done');

                expect(context.droidekaSecurity).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.atst).toBeInZone('groundArena');
                expect(context.player1.exhaustedResourceCount).toBe(5); // 3 + 2 after exploit
            });
        });

        // TODO: test exploit with smuggle and play from discard
    });
});
