describe('Exploit keyword', function() {
    integration(function(contextRef) {
        describe('When a unit with the Exploit keyword', function() {
            beforeEach(function () {
                contextRef.setupTest({
                    phase: 'action',
                    player1: {
                        hand: ['separatist-super-tank'],
                        groundArena: ['wampa', 'atst', 'battle-droid', 'snowspeeder'],
                        leader: 'moff-gideon#formidable-commander',
                        resources: 9
                    },
                    player2: {
                        groundArena: ['battlefield-marine']
                    }
                });
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the exact number of targets to be able to pay', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(5);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.battleDroid);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCardNonChecking(context.snowspeeder); // confirm that AT-ST can't be selected since it's exploit 3
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(8); // 5 + 3 after exploit
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the minimum number of targets to be able to pay (which we choose)', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(4);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('groundArena');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(9); // 4 + 5 after exploit
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the minimum number of targets to be able to pay (but we choose the max)', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(4);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                expect(context.player1).toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.battleDroid);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCardNonChecking(context.snowspeeder); // confirm that AT-ST can't be selected since it's exploit 3
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(7); // 4 + 3 after exploit
            });
        });

        // TODO: test exploit with smuggle and play from discard
    });
});
