describe('Exploit keyword', function() {
    integration(function(contextRef) {
        describe('When a unit with the Exploit keyword', function() {
            beforeEach(function () {
                contextRef.setupTest({
                    phase: 'action',
                    player1: {
                        hand: ['separatist-super-tank'],
                        groundArena: ['wampa', 'atst', 'battle-droid', 'snowspeeder'],
                        leader: 'moff-gideon#formidable-commander',
                        resources: 9
                    },
                    player2: {
                        groundArena: ['battlefield-marine']
                    }
                });
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the exact number of targets to be able to pay', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(5);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.battleDroid);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCardNonChecking(context.snowspeeder); // confirm that Snowspeeder can't be selected since it's exploit 3
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(8); // 5 + 3 after exploit
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the minimum number of targets to be able to pay (which we choose)', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(4);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('groundArena');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(9); // 4 + 5 after exploit
            });

            it('is played and there are only enough resources for playing with exploit, should go directly to exploit and require the minimum number of targets to be able to pay (but we choose the max)', function () {
                const { context } = contextRef;

                context.player1.exhaustResources(4);

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);

                context.player1.clickCard(context.wampa);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                expect(context.player1).toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.battleDroid);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCardNonChecking(context.snowspeeder); // confirm that Snowspeeder can't be selected since it's exploit 3
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(7); // 4 + 3 after exploit
            });

            it('is played and there are enough resources for standard play, should present both options and allow us to do max exploit', function () {
                const { context } = contextRef;

                context.player1.clickCard(context.separatistSuperTank);
                expect(context.player1).toHaveExactPromptButtons(['Play Separatist Super Tank', 'Play Separatist Super Tank using Exploit', 'Cancel']);
                context.player1.clickPrompt('Play Separatist Super Tank using Exploit');

                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.atst, context.battleDroid, context.snowspeeder]);
                expect(context.player1).not.toHaveEnabledPromptButton('Done');

                context.player1.clickCard(context.wampa);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.atst);
                expect(context.player1).toHaveEnabledPromptButton('Done');
                context.player1.clickCard(context.battleDroid);
                expect(context.player1).toHaveEnabledPromptButton('Done');

                context.player1.clickCardNonChecking(context.snowspeeder); // confirm that Snowspeeder can't be selected since it's exploit 3
                context.player1.clickPrompt('Done');

                expect(context.separatistSuperTank).toBeInZone('groundArena');
                expect(context.wampa).toBeInZone('discard');
                expect(context.battleDroid).toBeInZone('outsideTheGame');
                expect(context.snowspeeder).toBeInZone('groundArena');
                expect(context.atst).toBeInZone('discard');
                expect(context.player1.exhaustedResourceCount).toBe(3);
            });
        });

        it('When a unit with the Exploit keyword is played and there aren\'t enough units for the full amount, it will consider only as many as possible for the discount math', function() {
            contextRef.setupTest({
                phase: 'action',
                player1: {
                    hand: ['droideka-security'],
                    groundArena: ['wampa'],
                    leader: 'director-krennic#aspiring-to-authority',
                    resources: 3
                },
                player2: {
                    groundArena: ['battlefield-marine']
                }
            });

            const { context } = contextRef;

            // if there were enough units for the full exploit 2 then it would be playable, but there's only one unit
            expect(context.droidekaSecurity).not.toHaveAvailableActionWhenClickedBy(context.player1);
        });

        it('When a unit with the Exploit keyword is played and there are other discounts being applied, they will stack', function() {
            contextRef.setupTest({
                phase: 'action',
                player1: {
                    hand: ['multitroop-transport'],
                    groundArena: ['bendu#the-one-in-the-middle'],
                    leader: 'director-krennic#aspiring-to-authority',
                    resources: 3
                }
            });

            const { context } = contextRef;

            // attack with Bendu to activate discount
            context.player1.clickCard(context.bendu);
            context.player1.clickCard(context.p2Base);
            context.player2.passAction();

            // play Multitroop Transport, it will only be playable if the discount + exploit opportunity is computed right
            context.player1.clickCard(context.multitroopTransport);
            expect(context.player1).toBeAbleToSelectExactly([context.bendu]);
            context.player1.clickCard(context.bendu);
            context.player1.clickPrompt('Done');

            expect(context.multitroopTransport).toBeInZone('groundArena');
            expect(context.bendu).toBeInZone('discard');
            expect(context.player1.exhaustedResourceCount).toBe(3);
        });

        describe('When a unit with a "when defeated" ability is exploited', function() {
            beforeEach(function () {
                contextRef.setupTest({
                    phase: 'action',
                    player1: {
                        hand: ['tridroid-suppressor', 'planetary-invasion'],
                        groundArena: ['vanguard-infantry', { card: 'bossk#deadly-stalker', exhausted: true }],
                        base: 'chopper-base'
                    },
                    player2: {
                        groundArena: ['wampa']
                    }
                });
            });

            it('to play a unit card, the trigger happens in the same window as the played card\'s "on played" trigger', function() {
                const { context } = contextRef;

                context.player1.clickCard(context.tridroidSuppressor);
                context.player1.clickPrompt('Play Tri-Droid Suppressor using Exploit');
                context.player1.clickCard(context.vanguardInfantry);
                context.player1.clickPrompt('Done');

                expect(context.vanguardInfantry).toBeInZone('discard');
                expect(context.tridroidSuppressor).toBeInZone('groundArena');
                expect(context.player1).toHaveExactPromptButtons([
                    'Give an Experience token to a unit',
                    'Exhaust an enemy ground unit.'
                ]);

                // resolve Vanguard Infantry ability and confirm it sees the right targets
                context.player1.clickPrompt('Give an Experience token to a unit');
                expect(context.player1).toBeAbleToSelectExactly([context.tridroidSuppressor, context.bossk, context.wampa]);
                context.player1.clickCard(context.tridroidSuppressor);
                expect(context.tridroidSuppressor).toHaveExactUpgradeNames(['experience']);

                // resolve Tri-Droid Suppressor ability
                expect(context.player1).toBeAbleToSelectExactly([context.wampa]);
                context.player1.clickCard(context.wampa);
                expect(context.wampa.exhausted).toBeTrue();
            });

            it('to play an event card, the trigger happens in the same window as any "when event is played" triggers', function() {
                const { context } = contextRef;

                context.player1.clickCard(context.planetaryInvasion);
                context.player1.clickPrompt('Play Planetary Invasion using Exploit');
                context.player1.clickCard(context.vanguardInfantry);
                context.player1.clickPrompt('Done');

                // when event ability resolves, the unit is defeated but the cost triggers have not happened yet
                expect(context.vanguardInfantry).toBeInZone('discard');
                expect(context.planetaryInvasion).toBeInZone('discard');
                expect(context.player1).toBeAbleToSelectExactly([context.bossk, context.wampa]);
                context.player1.clickCard(context.bossk);
                context.player1.clickPrompt('Done');
                expect(context.bossk.exhausted).toBeFalse();

                expect(context.player1).toHaveExactPromptButtons([
                    'Give an Experience token to a unit',
                    'Deal 2 damage to a unit'
                ]);

                // resolve Vanguard Infantry ability and confirm it sees the right targets
                context.player1.clickPrompt('Give an Experience token to a unit');
                expect(context.player1).toBeAbleToSelectExactly([context.bossk, context.wampa]);
                context.player1.clickCard(context.bossk);
                expect(context.bossk).toHaveExactUpgradeNames(['experience']);

                // resolve Bossk ability
                expect(context.player1).toBeAbleToSelectExactly([context.wampa, context.bossk]);
                context.player1.clickCard(context.wampa);
                expect(context.wampa.damage).toBe(2);
            });
        });

        // TODO: test exploit with smuggle and play from discard
        // TODO: exploit where the cost is already zero due to discounts (Palpatine's Return)
        // TODO: autoSingleTarget tests?
        // TODO: test that sub-ability-steps respect the trigger window settings (separate test suite)
        // TODO: test Exploit timing when a play card ability is used (e.g. ECL)
        // TODO: test Exploit timing (normal play and ability play) with an event
        // TODO: test Exploit timing using Dodonna
    });
});
